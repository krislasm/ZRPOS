/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "swa/rpos/Component-preload",
	"modules": {
		"swa/rpos/controller/App.controller.js": "sap.ui.define([\n\t\t\"swa/rpos/controller/BaseController\",\n\t\t\"sap/ui/model/json/JSONModel\"\n\t], function (BaseController, JSONModel) {\n\t\t\"use strict\";\n\n\t\treturn BaseController.extend(\"swa.rpos.controller.App\", {\n\n\t\t\tonInit : function () {\n\t\t\t\tvar oViewModel,\n\t\t\t\t\tfnSetAppNotBusy,\n\t\t\t\t\toListSelector = this.getOwnerComponent().oListSelector,\n\t\t\t\t\tiOriginalBusyDelay = this.getView().getBusyIndicatorDelay();\n\n\t\t\t\toViewModel = new JSONModel({\n\t\t\t\t\tbusy : true,\n\t\t\t\t\tdelay : 0\n\t\t\t\t});\n\t\t\t\tthis.setModel(oViewModel, \"appView\");\n\n\t\t\t\tfnSetAppNotBusy = function() {\n\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t\t};\n\n\t\t\t\tthis.getOwnerComponent().getModel().metadataLoaded()\n\t\t\t\t\t\t.then(fnSetAppNotBusy);\n\n\t\t\t\t// Makes sure that master view is hidden in split app\n\t\t\t\t// after a new list entry has been selected.\n\t\t\t\toListSelector.attachListSelectionChange(function () {\n\t\t\t\t\tthis.byId(\"idAppControl\").hideMaster();\n\t\t\t\t}, this);\n\n\t\t\t\t// apply content density mode to root view\n\t\t\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"swa/rpos/controller/BaseController.js": "/*global history */\nsap.ui.define([\n\t\t\"sap/ui/core/mvc/Controller\",\n\t\t\"sap/ui/core/routing/History\"\n\t], function (Controller, History) {\n\t\t\"use strict\";\n\n\t\treturn Controller.extend(\"swa.rpos.controller.BaseController\", {\n\t\t\t/**\n\t\t\t * Convenience method for accessing the router in every controller of the application.\n\t\t\t * @public\n\t\t\t * @returns {sap.ui.core.routing.Router} the router for this component\n\t\t\t */\n\t\t\tgetRouter : function () {\n\t\t\t\treturn this.getOwnerComponent().getRouter();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for getting the view model by name in every controller of the application.\n\t\t\t * @public\n\t\t\t * @param {string} sName the model name\n\t\t\t * @returns {sap.ui.model.Model} the model instance\n\t\t\t */\n\t\t\tgetModel : function (sName) {\n\t\t\t\treturn this.getView().getModel(sName);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for setting the view model in every controller of the application.\n\t\t\t * @public\n\t\t\t * @param {sap.ui.model.Model} oModel the model instance\n\t\t\t * @param {string} sName the model name\n\t\t\t * @returns {sap.ui.mvc.View} the view instance\n\t\t\t */\n\t\t\tsetModel : function (oModel, sName) {\n\t\t\t\treturn this.getView().setModel(oModel, sName);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for getting the resource bundle.\n\t\t\t * @public\n\t\t\t * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\n\t\t\t */\n\t\t\tgetResourceBundle : function () {\n\t\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Event handler for navigating back.\n\t\t\t * It there is a history entry we go one step back in the browser history\n\t\t\t * If not, it will replace the current entry of the browser history with the master route.\n\t\t\t * @public\n\t\t\t */\n\t\t\tonNavBack : function() {\n\t\t\t\tvar sPreviousHash = History.getInstance().getPreviousHash();\n\n\t\t\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t\thistory.go(-1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.getRouter().navTo(\"master\", {}, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"swa/rpos/Component.js": "sap.ui.define([\r\n\t\t\"sap/ui/core/UIComponent\",\r\n\t\t\"sap/ui/Device\",\r\n\t\t\"swa/rpos/model/models\",\r\n\t\t\"swa/rpos/controller/ListSelector\",\r\n\t\t\"swa/rpos/controller/ErrorHandler\"\r\n\t], function (UIComponent, Device, models, ListSelector, ErrorHandler) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn UIComponent.extend(\"swa.rpos.Component\", {\r\n\r\n\t\t\tmetadata : {\r\n\t\t\t\tmanifest : \"json\"\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\r\n\t\t\t * In this method, the device models are set and the router is initialized.\r\n\t\t\t * @public\r\n\t\t\t * @override\r\n\t\t\t */\r\n\t\t\tinit : function () {\r\n\t\t\t\tthis.oListSelector = new ListSelector();\r\n\t\t\t\tthis._oErrorHandler = new ErrorHandler(this);\r\n\r\n\t\t\t\t// set the device model\r\n\t\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\r\n\r\n\t\t\t\t// call the base component's init function and create the App view\r\n\t\t\t\tUIComponent.prototype.init.apply(this, arguments);\r\n\r\n\t\t\t\t// create the views based on the url/hash\r\n\t\t\t\tthis.getRouter().initialize();\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * The component is destroyed by UI5 automatically.\r\n\t\t\t * In this method, the ListSelector and ErrorHandler are destroyed.\r\n\t\t\t * @public\r\n\t\t\t * @override\r\n\t\t\t */\r\n\t\t\tdestroy : function () {\r\n\t\t\t\tthis.oListSelector.destroy();\r\n\t\t\t\tthis._oErrorHandler.destroy();\r\n\t\t\t\t// call the base component's destroy function\r\n\t\t\t\tUIComponent.prototype.destroy.apply(this, arguments);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\r\n\t\t\t * design mode class should be set, which influences the size appearance of some controls.\r\n\t\t\t * @public\r\n\t\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\r\n\t\t\t */\r\n\t\t\tgetContentDensityClass : function() {\r\n\t\t\t\tif (this._sContentDensityClass === undefined) {\r\n\t\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\r\n\t\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\r\n\t\t\t\t\t\tthis._sContentDensityClass = \"\";\r\n\t\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\r\n\t\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\r\n\t\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCozy\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this._sContentDensityClass;\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n);",
		"swa/rpos/controller/ErrorHandler.js": "sap.ui.define([\n\t\t\"sap/ui/base/Object\",\n\t\t\"sap/m/MessageBox\"\n\t], function (UI5Object, MessageBox) {\n\t\t\"use strict\";\n\n\t\treturn UI5Object.extend(\"swa.rpos.controller.ErrorHandler\", {\n\n\t\t\t/**\n\t\t\t * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n\t\t\t * @class\n\t\t\t * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\n\t\t\t * @public\n\t\t\t * @alias swa.rpos.controller.ErrorHandler\n\t\t\t */\n\t\t\tconstructor : function (oComponent) {\n\t\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle();\n\t\t\t\tthis._oComponent = oComponent;\n\t\t\t\tthis._oModel = oComponent.getModel();\n\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\tthis._sErrorText = this._oResourceBundle.getText(\"errorText\");\n\n\t\t\t\tthis._oModel.attachMetadataFailed(function (oEvent) {\n\t\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\t\tthis._showMetadataError(oParams.response);\n\t\t\t\t}, this);\n\n\t\t\t\tthis._oModel.attachRequestFailed(function (oEvent) {\n\t\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\t\t// An entity that was not found in the service is also throwing a 404 error in oData.\n\t\t\t\t\t// We already cover this case with a notFound target so we skip it here.\n\t\t\t\t\t// A request that cannot be sent to the server is a technical error that we have to handle though\n\t\t\t\t\tif (oParams.response.statusCode !== \"404\" || (oParams.response.statusCode === 404 && oParams.response.responseText.indexOf(\"Cannot POST\") === 0)) {\n\t\t\t\t\t\tthis._showServiceError(oParams.response);\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Shows a {@link sap.m.MessageBox} when the metadata call has failed.\n\t\t\t * The user can try to refresh the metadata.\n\t\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t\t * @private\n\t\t\t */\n\t\t\t_showMetadataError : function (sDetails) {\n\t\t\t\tMessageBox.error(\n\t\t\t\t\tthis._sErrorText,\n\t\t\t\t\t{\n\t\t\t\t\t\tid : \"metadataErrorMessageBox\",\n\t\t\t\t\t\tdetails : sDetails,\n\t\t\t\t\t\tstyleClass : this._oComponent.getContentDensityClass(),\n\t\t\t\t\t\tactions : [MessageBox.Action.RETRY, MessageBox.Action.CLOSE],\n\t\t\t\t\t\tonClose : function (sAction) {\n\t\t\t\t\t\t\tif (sAction === MessageBox.Action.RETRY) {\n\t\t\t\t\t\t\t\tthis._oModel.refreshMetadata();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}.bind(this)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Shows a {@link sap.m.MessageBox} when a service call has failed.\n\t\t\t * Only the first error message will be display.\n\t\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t\t * @private\n\t\t\t */\n\t\t\t_showServiceError : function (sDetails) {\n\t\t\t\tif (this._bMessageOpen) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._bMessageOpen = true;\n\t\t\t\tMessageBox.error(\n\t\t\t\t\tthis._sErrorText,\n\t\t\t\t\t{\n\t\t\t\t\t\tid : \"serviceErrorMessageBox\",\n\t\t\t\t\t\tdetails : sDetails,\n\t\t\t\t\t\tstyleClass : this._oComponent.getContentDensityClass(),\n\t\t\t\t\t\tactions : [MessageBox.Action.CLOSE],\n\t\t\t\t\t\tonClose : function () {\n\t\t\t\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\t\t\t}.bind(this)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"swa/rpos/controller/Detail.controller.js": "/*global location */\r\nvar that = null;\r\nsap.ui.define([\r\n\t\"swa/rpos/controller/BaseController\",\r\n\t\"sap/ui/model/json/JSONModel\",\r\n\t\"swa/rpos/model/formatter\",\r\n\t\"sap/m/MessageToast\",\r\n\t\"sap/ui/model/Filter\",\r\n\t\"sap/ui/model/FilterOperator\"\r\n], function(B, J, f, MessageToast, F, a) {\r\n\t\"use strict\";\r\n\r\n\treturn B.extend(\"swa.rpos.controller.Detail\", {\r\n\r\n\t\tformatter: f,\r\n\r\n\t\t/* =========================================================== */\r\n\t\t/* lifecycle methods                                           */\r\n\t\t/* =========================================================== */\r\n\r\n\t\tonInit: function() {\r\n\t\t\tthat = this;\r\n\t\t\tvar oViewModel = new J({\r\n\t\t\t\tbusy: false,\r\n\t\t\t\tdelay: 0,\r\n\t\t\t\tlineItemListTitle: this.getResourceBundle().getText(\"detailLineItemTableHeading\")\r\n\t\t\t});\r\n\t\t\tthis.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\r\n\t\t\tthis.setModel(oViewModel, \"detailView\");\r\n\t\t},\r\n\t\t_onObjectMatched: function(e) {\r\n\r\n\t\t\t/*\tif (e.getParameter(\"arguments\") && e.getParameter(\"arguments\").navBack !== \"StudentOverview\") {*/\r\n\t\t\tthis.swaId = e.getParameter(\"arguments\").objectId;\r\n\t\t\tthis.bP = e.getParameter(\"arguments\").prgmId;\r\n\t\t\tthis.sUrl = \"/sap/opu/odata/sap/ZPIQ_STUDENT_PERSONAL_DETAILS_SRV/\";\r\n\t\t\t/*if (this.byId(\"endDate\")) {\r\n\t\t\t\tthis.byId(\"endDate\").setValue('');\r\n\t\t\t}\r\n\t\t\tif (this.byId(\"firstDate\")) {\r\n\t\t\t\tthis.byId(\"firstDate\").setValue('');\r\n\t\t\t}*/\r\n\t\t\tthis.byId(\"endDate\").setValue('');\r\n\t\t\tthis.byId(\"firstDate\").setValue('');\r\n\t\t\tif (this.byId(\"AttTable\").getModel(\"TransDetails\")) {\r\n\t\t\t\tthis.byId(\"AttTable\").getInfoToolbar().setVisible(false);\r\n\t\t\t\tthis.byId(\"AttTable\").getModel(\"TransDetails\").setData('');\r\n\t\t\t\tthis.byId(\"AttTable\").getModel(\"TransDetails\").refresh();\r\n\t\t\t}\r\n\t\t\t/*\tvar oDataModel = new sap.ui.model.odata.v2.ODataModel(that.sUrl, {\r\n\t\t\t\t\tjson: true,\r\n\t\t\t\t\tloadMetadataAsync: true\r\n\t\t\t\t});*/\r\n\r\n\t\t\t//oDataModel.read(\"/HeaderDetailsSet(StudentObjid='\" + this.stdObjId + \"')\", p);\r\n\t\t},\r\n\t\tformatDate: function(date) {\r\n\t\t\tvar d = new Date(date),\r\n\t\t\t\tmonth = '' + (d.getMonth() + 1),\r\n\t\t\t\tday = '' + d.getDate(),\r\n\t\t\t\tyear = d.getFullYear();\r\n\r\n\t\t\tif (month.length < 2) {\r\n\t\t\t\tmonth = '0' + month;\r\n\t\t\t}\r\n\t\t\tif (day.length < 2) {\r\n\t\t\t\tday = '0' + day;\r\n\t\t\t}\r\n\t\t\t//return [day, month, year].join('.');\r\n\t\t\treturn [year, month, day].join('');\r\n\t\t},\r\n\t\tgetTransDetails: function(e) {\r\n\t\t\tif (this.byId(\"firstDate\").getValue() !== \"\" && this.byId(\"endDate\").getValue() !== \"\") {\r\n\t\t\t\tvar year = [],\r\n\t\t\t\t\tterm = [],\r\n\t\t\t\t\tstudentId = [];\r\n\t\t\t\tthat = this;\r\n\t\t\t\tyear.push(new sap.ui.model.Filter(\"swaId\", sap.ui.model.FilterOperator.EQ, this.swaId));\r\n\t\t\t\tterm.push(new sap.ui.model.Filter(\"fromDate\", sap.ui.model.FilterOperator.EQ, this.formatDate(this.byId(\"firstDate\").getDateValue())));\r\n\t\t\t\tstudentId.push(new sap.ui.model.Filter(\"toDate\", sap.ui.model.FilterOperator.EQ, this.formatDate(this.byId(\"endDate\").getDateValue())));\r\n\r\n\t\t\t\tthis.filterswaid = new sap.ui.model.Filter({\r\n\t\t\t\t\tfilters: year,\r\n\t\t\t\t\tand: true\r\n\t\t\t\t});\r\n\t\t\t\tthis.filtefromDate = new sap.ui.model.Filter({\r\n\t\t\t\t\tfilters: term,\r\n\t\t\t\t\tand: true\r\n\t\t\t\t});\r\n\t\t\t\tthis.toDate = new sap.ui.model.Filter({\r\n\t\t\t\t\tfilters: studentId,\r\n\t\t\t\t\tand: true\r\n\t\t\t\t});\r\n\t\t\t\tvar filter = new sap.ui.model.Filter({\r\n\t\t\t\t\tfilters: [this.filterswaid, this.filtefromDate, this.toDate],\r\n\t\t\t\t\tand: true\r\n\t\t\t\t});\r\n\t\t\t\tthis.oDataModel = this.getView().getModel();\r\n\t\t\t\tthat.oDataModel.read(\"/TransDetailSet\", {\r\n\t\t\t\t\tfilters: [filter],\r\n\t\t\t\t\tsuccess: function(oData, response) {\r\n\r\n\t\t\t\t\t\tvar dataModel = new J();\r\n\t\t\t\t\t\tvar info = \"\";\r\n\t\t\t\t\t\tdataModel.setData({\r\n\t\t\t\t\t\t\t\"Value\": oData.results\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif(oData.results.length > 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\tif(oData.results[0].openBal !== \"\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tinfo = \"Opening Balance: \" + oData.results[0].openBal +\" IDR\"; \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(oData.results[0].closeBal !== \"\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tinfo = info + \" and Closing Balance: \" + oData.results[0].closeBal +\" IDR\"; \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthat.getView().setModel(dataModel, \"TransDetails\");\r\n\t\t\t\t\t\tthat.byId(\"AttTable\").getModel(\"TransDetails\").refresh();\r\n\t\t\t\t\t\tthat.byId(\"AttTable\").getInfoToolbar().setVisible(true);\r\n\t\t\t\t\t\tthat.byId(\"openclosebal\").setText(info);\r\n\t\t\t\t\t\t//\tthat.dropdownAssignmentData();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tvar dialog_1 = new sap.m.Dialog({\r\n\t\t\t\t\ttitle: 'Error',\r\n\t\t\t\t\ttype: 'Message',\r\n\t\t\t\t\tstate: 'Error',\r\n\t\t\t\t\tcontent: new sap.m.Text({\r\n\t\t\t\t\t\ttext: 'Please ensure Date Range is selected.'\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tbeginButton: new sap.m.Button({\r\n\t\t\t\t\t\ttext: 'OK',\r\n\t\t\t\t\t\tpress: function() {\r\n\t\t\t\t\t\t\tdialog_1.close();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tafterClose: function() {\r\n\t\t\t\t\t\tdialog_1.destroy();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tdialog_1.open();\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n});",
		"swa/rpos/controller/ListSelector.js": "sap.ui.define([\n\t\t\"sap/ui/base/Object\"\n\t], function (BaseObject) {\n\t\t\"use strict\";\n\n\t\treturn BaseObject.extend(\"swa.rpos.model.ListSelector\", {\n\n\t\t\t/**\n\t\t\t * Provides a convenience API for selecting list items. All the functions will wait until the initial load of the a List passed to the instance by the setBoundMasterList\n\t\t\t * function.\n\t\t\t * @class\n\t\t\t * @public\n\t\t\t * @alias swa.rpos.model.ListSelector\n\t\t\t */\n\n\t\t\tconstructor : function () {\n\t\t\t\tthis._oWhenListHasBeenSet = new Promise(function (fnResolveListHasBeenSet) {\n\t\t\t\t\tthis._fnResolveListHasBeenSet = fnResolveListHasBeenSet;\n\t\t\t\t}.bind(this));\n\t\t\t\t// This promise needs to be created in the constructor, since it is allowed to\n\t\t\t\t// invoke selectItem functions before calling setBoundMasterList\n\t\t\t\tthis.oWhenListLoadingIsDone = new Promise(function (fnResolve, fnReject) {\n\t\t\t\t\t// Used to wait until the setBound masterList function is invoked\n\t\t\t\t\tthis._oWhenListHasBeenSet\n\t\t\t\t\t\t.then(function (oList) {\n\t\t\t\t\t\t\toList.getBinding(\"items\").attachEventOnce(\"dataReceived\",\n\t\t\t\t\t\t\t\tfunction (oData) {\n\t\t\t\t\t\t\t\t\tif (!oData.getParameter(\"data\")) {\n\t\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\n\t\t\t\t\t\t\t\t\t\t\terror : true\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar oFirstListItem = oList.getItems()[0];\n\t\t\t\t\t\t\t\t\tif (oFirstListItem) {\n\t\t\t\t\t\t\t\t\t\t// Have to make sure that first list Item is selected\n\t\t\t\t\t\t\t\t\t\t// and a select event is triggered. Like that, the corresponding\n\t\t\t\t\t\t\t\t\t\t// detail page is loaded automatically\n\t\t\t\t\t\t\t\t\t\tfnResolve({\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\n\t\t\t\t\t\t\t\t\t\t\tfirstListitem : oFirstListItem\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// No items in the list\n\t\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\n\t\t\t\t\t\t\t\t\t\t\terror : false\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t}.bind(this));\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * A bound list should be passed in here. Should be done, before the list has received its initial data from the server.\n\t\t\t * May only be invoked once per ListSelector instance.\n\t\t\t * @param {sap.m.List} oList The list all the select functions will be invoked on.\n\t\t\t * @public\n\t\t\t */\n\t\t\tsetBoundMasterList : function (oList) {\n\t\t\t\tthis._oList = oList;\n\t\t\t\tthis._fnResolveListHasBeenSet(oList);\n\t\t\t},\n\n\n\t\t\t/**\n\t\t\t * Tries to select and scroll to a list item with a matching binding context. If there are no items matching the binding context or the ListMode is none,\n\t\t\t * no selection/scrolling will happen\n\t\t\t * @param {string} sBindingPath the binding path matching the binding path of a list item\n\t\t\t * @public\n\t\t\t */\n\t\t\tselectAListItem : function (sBindingPath) {\n\n\t\t\t\tthis.oWhenListLoadingIsDone.then(\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar oList = this._oList,\n\t\t\t\t\t\t\toSelectedItem;\n\n\t\t\t\t\t\tif (oList.getMode() === \"None\") {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toSelectedItem = oList.getSelectedItem();\n\n\t\t\t\t\t\t// skip update if the current selection is already matching the object path\n\t\t\t\t\t\tif (oSelectedItem && oSelectedItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toList.getItems().some(function (oItem) {\n\t\t\t\t\t\t\tif (oItem.getBindingContext() && oItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\t\t\toList.setSelectedItem(oItem);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tjQuery.sap.log.warning(\"Could not select the list item with the path\" + sBindingPath + \" because the list encountered an error or had no items\");\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t},\n\n\n\t\t\t/* =========================================================== */\n\t\t\t/* Convenience Functions for List Selection Change Event       */\n\t\t\t/* =========================================================== */\n\n\t\t\t/**\n\t\t\t * Attaches a listener and listener function to the ListSelector's bound master list. By using\n\t\t\t * a promise, the listener is added, even if the list is not available when 'attachListSelectionChange'\n\t\t\t * is called.\n\t\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t\t * @param {function} oListener the listener object\n\t\t\t * @return {swa.rpos.model.ListSelector} the list selector object for method chaining\n\t\t\t * @public\n\t\t\t */\n\t\t\tattachListSelectionChange : function (fnFunction, oListener) {\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\n\t\t\t\t\tthis._oList.attachSelectionChange(fnFunction, oListener);\n\t\t\t\t}.bind(this));\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Detaches a listener and listener function from the ListSelector's bound master list. By using\n\t\t\t * a promise, the listener is removed, even if the list is not available when 'detachListSelectionChange'\n\t\t\t * is called.\n\t\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t\t * @param {function} oListener the listener object\n\t\t\t * @return {swa.rpos.model.ListSelector} the list selector object for method chaining\n\t\t\t * @public\n\t\t\t */\n\t\t\tdetachListSelectionChange : function (fnFunction, oListener) {\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\n\t\t\t\t\tthis._oList.detachSelectionChange(fnFunction, oListener);\n\t\t\t\t}.bind(this));\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Removes all selections from master list.\n\t\t\t * Does not trigger 'selectionChange' event on master list, though.\n\t\t\t * @public\n\t\t\t */\n\t\t\tclearMasterListSelection : function () {\n\t\t\t\t//use promise to make sure that 'this._oList' is available\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\n\t\t\t\t\tthis._oList.removeSelections(true);\n\t\t\t\t}.bind(this));\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"swa/rpos/NotFound.view.xml": "<mvc:View\n\t\tcontrollerName=\"swa.mykids.controller.BaseController\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{i18n>notFoundTitle}\"\n\t\t\ttext=\"{i18n>notFoundText}\"\n\t\t\ticon=\"{sap-icon://document}\"\n\t\t\tdescription=\"\"\n\t\t\tshowNavButton=\"{device>/system/phone}\"\n\t\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>",
		"swa/rpos/model/formatter.js": "sap.ui.define([], function() {\r\n\t\"use strict\";\r\n\r\n\treturn {\r\n\r\n\t\tformatTransDate: function(d) {\r\n\t\t\tif(d)\r\n\t\t\t{\r\n\t\t\tvar y = d.substr(0,4);\r\n\t\t\tvar m = d.substr(4,2);\r\n\t\t\tvar day = d.substr(6,2);\r\n\t\t\treturn day + \".\" + m + \".\" + + y;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t/*\tformatInfo: function(o,c){\r\n\t\t\tvar info = \"\";\r\n\t\t\tif(o !== \"\")\r\n\t\t\t{\r\n\t\t\t\tinfo = \"Opening Balance: \" + o +\"IDR\"; \r\n\t\t\t}\r\n\t\t\tif(c !== \"\")\r\n\t\t\t{\r\n\t\t\t\tinfo = info + \"and Closing Balance: \" + c + \"IDR\";\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t}*/\r\n\t};\r\n\r\n});",
		"swa/rpos/DetailNoObjectsAvailable.view.xml": "<mvc:View\n\t\tcontrollerName=\"swa.mykids.controller.BaseController\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{i18n>notAvailableViewTitle}\"\n\t\t\ttext=\"{i18n>noObjectsAvailableText}\"\n\t\t\ticon=\"{sap-icon://product}\"\n\t\t\tdescription=\"\"\n\t\t\tshowNavButton=\"{device>/system/phone}\"\n\t\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>",
		"swa/rpos/controller/Master.controller.js": "/*global history */\r\nsap.ui.define([\r\n\t\"swa/rpos/controller/BaseController\",\r\n\t\"sap/ui/model/json/JSONModel\",\r\n\t\"sap/ui/model/Filter\",\r\n\t\"sap/ui/model/FilterOperator\",\r\n\t\"sap/m/GroupHeaderListItem\",\r\n\t\"sap/ui/Device\",\r\n\t\"swa/rpos/model/formatter\"\r\n], function(BaseController, JSONModel, Filter, FilterOperator, GroupHeaderListItem, Device, formatter) {\r\n\t\"use strict\";\r\n\r\n\treturn BaseController.extend(\"swa.rpos.controller.Master\", {\r\n\r\n\t\tformatter: formatter,\r\n\r\n\t\t/* =========================================================== */\r\n\t\t/* lifecycle methods                                           */\r\n\t\t/* =========================================================== */\r\n\r\n\t\t/**\r\n\t\t * Called when the master list controller is instantiated. It sets up the event handling for the master/detail communication and other lifecycle tasks.\r\n\t\t * @public\r\n\t\t */\r\n\t\tonInit: function() {\r\n\t\t\t// Control state model\r\n\t\t\tvar oList = this.byId(\"list\"),\r\n\t\t\t\toViewModel = this._createViewModel(),\r\n\t\t\t\t// Put down master list's original value for busy indicator delay,\r\n\t\t\t\t// so it can be restored later on. Busy handling on the master list is\r\n\t\t\t\t// taken care of by the master list itself.\r\n\t\t\t\tiOriginalBusyDelay = oList.getBusyIndicatorDelay();\r\n\r\n\t\t\tthis._oList = oList;\r\n\t\t\t// keeps the filter and search state\r\n\t\t\tthis._oListFilterState = {\r\n\t\t\t\taFilter: [],\r\n\t\t\t\taSearch: []\r\n\t\t\t};\r\n\r\n\t\t\tthis.setModel(oViewModel, \"masterView\");\r\n\t\t\t// Make sure, busy indication is showing immediately so there is no\r\n\t\t\t// break after the busy indication for loading the view's meta data is\r\n\t\t\t// ended (see promise 'oWhenMetadataIsLoaded' in AppController)\r\n\t\t\toList.attachEventOnce(\"updateFinished\", function() {\r\n\t\t\t\t// Restore original busy indicator delay for the list\r\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\r\n\t\t\t});\r\n\r\n\t\t\tthis.getView().addEventDelegate({\r\n\t\t\t\tonBeforeFirstShow: function() {\r\n\t\t\t\t\tthis.getOwnerComponent().oListSelector.setBoundMasterList(oList);\r\n\t\t\t\t}.bind(this)\r\n\t\t\t});\r\n\r\n\t\t\tthis.getRouter().getRoute(\"master\").attachPatternMatched(this._onMasterMatched, this);\r\n\t\t\tthis.getRouter().attachBypassed(this.onBypassed, this);\r\n\t\t},\r\n\r\n\t\t/* =========================================================== */\r\n\t\t/* event handlers                                              */\r\n\t\t/* =========================================================== */\r\n\r\n\t\t/**\r\n\t\t * After list data is available, this handler method updates the\r\n\t\t * master list counter and hides the pull to refresh control, if\r\n\t\t * necessary.\r\n\t\t * @param {sap.ui.base.Event} oEvent the update finished event\r\n\t\t * @public\r\n\t\t */\r\n\t\tonUpdateFinished: function(oEvent) {\r\n\t\t\t// update the master list object counter after new data is loaded\r\n\t\t\tthis._updateListItemCount(oEvent.getParameter(\"total\"));\r\n\t\t\tvar firstItem = oEvent.getSource().getItems()[0]; \r\n            oEvent.getSource().setSelectedItem(firstItem,true); \r\n\t\t\t// hide pull to refresh if necessary\r\n\t\t\tthis.byId(\"pullToRefresh\").hide();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Event handler for the master search field. Applies current\r\n\t\t * filter value and triggers a new search. If the search field's\r\n\t\t * 'refresh' button has been pressed, no new search is triggered\r\n\t\t * and the list binding is refresh instead.\r\n\t\t * @param {sap.ui.base.Event} oEvent the search event\r\n\t\t * @public\r\n\t\t */\r\n\t\tonSearch: function(oEvent) {\r\n\t\t\tif (oEvent.getParameters().refreshButtonPressed) {\r\n\t\t\t\t// Search field's 'refresh' button has been pressed.\r\n\t\t\t\t// This is visible if you select any master list item.\r\n\t\t\t\t// In this case no new search is triggered, we only\r\n\t\t\t\t// refresh the list binding.\r\n\t\t\t\tthis.onRefresh();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar sQuery = oEvent.getParameter(\"query\");\r\n\r\n\t\t/*\tif (sQuery) {\r\n\t\t\t\tthis._oListFilterState.aSearch = [new Filter(\"swaId\", FilterOperator.Contains, sQuery)];\r\n\t\t\t} else {\r\n\t\t\t\tthis._oListFilterState.aSearch = [];\r\n\t\t\t}\r\n\t\t\tthis._applyFilterSearch();*/\r\n\t\t\t\r\n\t\t\t\t// add filter for search\r\n\t\t\tvar aFilters = [];\r\n\t\t\tif (sQuery && sQuery.length > 0) {\r\n\t\t\t\tvar filter = new Filter(\"swaId\", sap.ui.model.FilterOperator.Contains, sQuery);\r\n\t\t\t\taFilters.push(filter);\r\n\t\t\t}\r\n\r\n\t\t\t// update list binding\r\n\t\t\tvar list = this.byId(\"list\");\r\n\t\t\tvar binding = list.getBinding(\"items\");\r\n\t\t\tbinding.filter(aFilters, \"Application\");\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Event handler for refresh event. Keeps filter, sort\r\n\t\t * and group settings and refreshes the list binding.\r\n\t\t * @public\r\n\t\t */\r\n\t\tonRefresh: function() {\r\n\t\t\tthis._oList.getBinding(\"items\").refresh();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Event handler for the list selection event\r\n\t\t * @param {sap.ui.base.Event} oEvent the list selectionChange event\r\n\t\t * @public\r\n\t\t */\r\n\t\tonSelectionChange: function(oEvent) {\r\n\t\t\t// get the list item, either from the listItem parameter or from the event's source itself (will depend on the device-dependent mode).\r\n\t\t\tthis._showDetail(oEvent.getParameter(\"listItem\") || oEvent.getSource());\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Event handler for the bypassed event, which is fired when no routing pattern matched.\r\n\t\t * If there was an object selected in the master list, that selection is removed.\r\n\t\t * @public\r\n\t\t */\r\n\t\tonBypassed: function() {\r\n\t\t\tthis._oList.removeSelections(true);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Used to create GroupHeaders with non-capitalized caption.\r\n\t\t * These headers are inserted into the master list to\r\n\t\t * group the master list's items.\r\n\t\t * @param {Object} oGroup group whose text is to be displayed\r\n\t\t * @public\r\n\t\t * @returns {sap.m.GroupHeaderListItem} group header with non-capitalized caption.\r\n\t\t */\r\n\t\tcreateGroupHeader: function(oGroup) {\r\n\t\t\treturn new GroupHeaderListItem({\r\n\t\t\t\ttitle: oGroup.text,\r\n\t\t\t\tupperCase: false\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Event handler for navigating back.\r\n\t\t * We navigate back in the browser historz\r\n\t\t * @public\r\n\t\t */\r\n\t\tonNavBack: function() {\r\n\t\t\thistory.go(-1);\r\n\t\t},\r\n\r\n\t\t/* =========================================================== */\r\n\t\t/* begin: internal methods                                     */\r\n\t\t/* =========================================================== */\r\n\r\n\t\t_createViewModel: function() {\r\n\t\t\treturn new JSONModel({\r\n\t\t\t\tisFilterBarVisible: false,\r\n\t\t\t\tfilterBarLabel: \"\",\r\n\t\t\t\tdelay: 0,\r\n\t\t\t\ttitle: this.getResourceBundle().getText(\"masterTitleCount\", [0]),\r\n\t\t\t\tnoDataText: this.getResourceBundle().getText(\"masterListNoDataText\"),\r\n\t\t\t\tsortBy: \"StudentNumber\",\r\n\t\t\t\tgroupBy: \"None\"\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * If the master route was hit (empty hash) we have to set\r\n\t\t * the hash to to the first item in the list as soon as the\r\n\t\t * listLoading is done and the first item in the list is known\r\n\t\t * @private\r\n\t\t */\r\n\t\t_onMasterMatched: function() {\r\n\t\t\tthis.getOwnerComponent().oListSelector.oWhenListLoadingIsDone.then(\r\n\t\t\t\tfunction(mParams) {\r\n\t\t\t\t\tif (mParams.list.getMode() === \"None\") {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar sObjectId = mParams.firstListitem.getBindingContext().getProperty(\"swaId\");\r\n\t\t\t\t\tvar prgmId = mParams.firstListitem.getBindingContext().getProperty(\"bPartner\");\r\n\t\t\t\t\tthis.getRouter().navTo(\"object\", {\r\n\t\t\t\t\t\tobjectId: sObjectId,\r\n\t\t\t\t\t\tprgmId: prgmId\r\n\t\t\t\t\t}, true);\r\n\t\t\t\t}.bind(this),\r\n\t\t\t\tfunction(mParams) {\r\n\t\t\t\t\tif (mParams.error) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.getRouter().getTargets().display(\"detailNoObjectsAvailable\");\r\n\t\t\t\t}.bind(this)\r\n\t\t\t);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Shows the selected item on the detail page\r\n\t\t * On phones a additional history entry is created\r\n\t\t * @param {sap.m.ObjectListItem} oItem selected Item\r\n\t\t * @private\r\n\t\t */\r\n\t\t_showDetail: function(oItem) {\r\n\t\t\tvar bReplace = !Device.system.phone;\r\n\t\t\tthis.getRouter().navTo(\"object\", {\r\n\t\t\t\tobjectId: oItem.getBindingContext().getProperty(\"swaId\"),\r\n\t\t\t\tprgmId: oItem.getBindingContext().getProperty(\"bPartner\")\r\n\t\t\t}, bReplace);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets the item count on the master list header\r\n\t\t * @param {integer} iTotalItems the total number of items in the list\r\n\t\t * @private\r\n\t\t */\r\n\t\t_updateListItemCount: function(iTotalItems) {\r\n\t\t\tvar sTitle;\r\n\t\t\t// only update the counter if the length is final\r\n\t\t\tif (this._oList.getBinding(\"items\").isLengthFinal()) {\r\n\t\t\t\tsTitle = this.getResourceBundle().getText(\"masterTitleCount\", [iTotalItems]);\r\n\t\t\t\tthis.getModel(\"masterView\").setProperty(\"/title\", sTitle);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Internal helper method to apply both filter and search state together on the list binding\r\n\t\t * @private\r\n\t\t */\r\n\t\t_applyFilterSearch: function() {\r\n\t\t\tvar aFilters = this._oListFilterState.aSearch.concat(this._oListFilterState.aFilter),\r\n\t\t\t\toViewModel = this.getModel(\"masterView\");\r\n\t\t\tthis._oList.getBinding(\"items\").filter(aFilters, \"Application\");\r\n\t\t\r\n\t\t\t// changes the noDataText of the list in case there are no filter results\r\n\t\t\tif (aFilters.length !== 0) {\r\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataWithFilterOrSearchText\"));\r\n\t\t\t} else if (this._oListFilterState.aSearch.length > 0) {\r\n\t\t\t\t// only reset the no data text to default when no new search was triggered\r\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataText\"));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Internal helper method to apply both group and sort state together on the list binding\r\n\t\t * @param {sap.ui.model.Sorter[]} aSorters an array of sorters\r\n\t\t * @private\r\n\t\t */\r\n\t\t_applyGroupSort: function(aSorters) {\r\n\t\t\tthis._oList.getBinding(\"items\").sort(aSorters);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Internal helper method that sets the filter bar visibility property and the label's caption to be shown\r\n\t\t * @param {string} sFilterBarText the selected filter value\r\n\t\t * @private\r\n\t\t */\r\n\t\t_updateFilterBar: function(sFilterBarText) {\r\n\t\t\tvar oViewModel = this.getModel(\"masterView\");\r\n\t\t\toViewModel.setProperty(\"/isFilterBarVisible\", (this._oListFilterState.aFilter.length > 0));\r\n\t\t\toViewModel.setProperty(\"/filterBarLabel\", this.getResourceBundle().getText(\"masterFilterBarText\", [sFilterBarText]));\r\n\t\t}\r\n\r\n\t});\r\n\r\n});",
		"swa/rpos/view/Detail.view.xml": "<mvc:View controllerName=\"swa.rpos.controller.Detail\" xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns:me=\"sap.me\"\n\txmlns:footerbar=\"sap.ushell.ui.footerbar\" xmlns:forms=\"sap.ui.layout.form\" xmlns:layout=\"sap.ui.layout\" xmlns:core=\"sap.ui.core\"\n\txmlns:t=\"sap.ui.table\" xmlns:smartFilterBar=\"sap.ui.comp.smartfilterbar\" xmlns:smartTable=\"sap.ui.comp.smarttable\">\n\t<Page id=\"page\" enableScrolling=\"true\" title=\"{i18n>detailTitle}\">\n\t\t<content>\n\t\t\t<layout:Grid xmlns:sap.ui.layout=\"sap.ui.layout\" id=\"__grid0\" defaultSpan=\"XL3 L3 M4 S12\">\n\t\t\t\t<layout:content>\n\t\t\t\t\t<VBox width=\"100%\" class=\"sapUiMediumMarginTop\">\n\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t<Label text=\"{i18n>fromDate}\" width=\"100%\" id=\"__label1\" required=\"true\"/>\n\t\t\t\t\t\t\t<DatePicker id=\"firstDate\" placeholder=\"Enter From Date ...\" width=\"100%\"/>\n\t\t\t\t\t\t</items>\n\t\t\t\t\t</VBox>\n\t\t\t\t\t<VBox width=\"100%\" class=\"sapUiMediumMarginTop\">\n\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t<Label text=\"{i18n>toDate}\" width=\"100%\" id=\"__label2\" required=\"true\"/>\n\t\t\t\t\t\t\t<DatePicker id=\"endDate\" placeholder=\"Enter To Date ...\" width=\"100%\"/>\n\t\t\t\t\t\t</items>\n\t\t\t\t\t</VBox>\n\t\t\t\t\t<VBox width=\"100%\" class=\"sapUiMediumMarginTop\">\n\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t<Label text=\"\" width=\"100%\"/>\n\t\t\t\t\t\t\t<Button id=\"btnDisplay\" text=\"Get Details\" tap=\"getTransDetails\" width=\"10em\"/>\n\t\t\t\t\t\t</items>\n\t\t\t\t\t</VBox>\n\t\t\t\t</layout:content>\n\t\t\t</layout:Grid>\n\t\t\t<layout:Grid defaultSpan=\"XL12 L12 M12 S12\" class=\"sapUiMediumMarginTop\">\n\t\t\t\t<Table id=\"AttTable\" inset=\"false\" mergeDuplicates=\"true\" alternateRowColors=\"true\" items=\"{TransDetails>/Value}\">\n\t\t\t\t\t<headerToolbar>\n\t\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t\t<Title id=\"tableTitle\" text=\"Transaction Details\" level=\"H2\"/>\n\t\t\t\t\t\t\t\t<!--<ToolbarSpacer/>\n\t\t\t\t\t\t\t\t<DatePicker id=\"firstDate1\" placeholder=\"Enter From Date ...\" />\n\t\t\t\t\t\t\t\t<DatePicker id=\"endDate1\" placeholder=\"Enter To Date ...\" />-->\n\t\t\t\t\t\t\t</content>\n\t\t\t\t\t\t</Toolbar>\n\t\t\t\t\t</headerToolbar>\n\t\t\t\t\t<infoToolbar>\n\t\t\t\t\t\t<Toolbar active=\"true\" visible=\"false\">\n\t\t\t\t\t\t\t<Label id=\"openclosebal\" text=\"\"/>\n\t\t\t\t\t\t</Toolbar>\n\t\t\t\t\t</infoToolbar>\n\t\t\t\t\t<columns>\n\t\t\t\t\t\t<Column demandPopin=\"true\" minScreenWidth=\"Tablet\" mergeDuplicates=\"true\" width=\"8em\">\n\t\t\t\t\t\t\t<Label text=\"{i18n>tdate}\" tooltip=\"Subject\"/>\n\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t<Column mergeDuplicates=\"true\">\n\t\t\t\t\t\t\t<Label text=\"{i18n>transNo}\"/>\n\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t<!--\t<Column demandPopin=\"true\" minScreenWidth=\"Tablet\">\n\t\t\t\t\t\t\t<Label text=\"{i18n>itemNo}\" tooltip=\"Academic Year\"/>\n\t\t\t\t\t\t</Column>-->\n\t\t\t\t\t\t<Column demandPopin=\"true\" minScreenWidth=\"Tablet\">\n\t\t\t\t\t\t\t<Label text=\"{i18n>itemDel}\"/>\n\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t<Column demandPopin=\"true\" minScreenWidth=\"Tablet\">\n\t\t\t\t\t\t\t<Label text=\"{i18n>transType}\"/>\n\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t<Column >\n\t\t\t\t\t\t\t<Label text=\"{i18n>amt}\"/>\n\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t<Column demandPopin=\"true\" minScreenWidth=\"Tablet\">\n\t\t\t\t\t\t\t<Label text=\"{i18n>bal}\"/>\n\t\t\t\t\t\t</Column>\n\t\t\t\t\t</columns>\n\t\t\t\t\t<items>\n\t\t\t\t\t\t<ColumnListItem>\n\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t<Text text=\"{path:'TransDetails>transDate',formatter: '.formatter.formatTransDate'}\"/>\n\t\t\t\t\t\t\t\t<Text text=\"{TransDetails>Transactionno}\"/>\n\t\t\t\t\t\t\t\t<!--<Text text=\"{TransDetails>Itemno}\"/>-->\n\t\t\t\t\t\t\t\t<Text text=\"{TransDetails>Itemno}. {TransDetails>Itemdescription}\"/>\n\t\t\t\t\t\t\t\t<Text text=\"{TransDetails>Typeoftrans}\"/>\n\t\t\t\t\t\t\t\t<ObjectNumber number=\"{ parts:[{path:'TransDetails>Amount'}], type: 'sap.ui.model.type.Currency', formatOptions: {showMeasure: false} }\"\n\t\t\t\t\t\t\t\t\tunit=\"IDR\"/>\n\t\t\t\t\t\t\t\t<ObjectNumber number=\"{ parts:[{path:'TransDetails>Balance'}], type: 'sap.ui.model.type.Currency', formatOptions: {showMeasure: false} }\"\n\t\t\t\t\t\t\t\t\tunit=\"IDR\"/>\n\t\t\t\t\t\t\t\t<!--<Text text=\"{TransDetails>Balance}\"/>-->\n\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t</ColumnListItem>\n\t\t\t\t\t</items>\n\t\t\t\t</Table>\n\t\t\t</layout:Grid>\n\t\t</content>\n\t</Page>\n</mvc:View>",
		"swa/rpos/model/models.js": "sap.ui.define([\r\n\t\t\"sap/ui/model/json/JSONModel\",\r\n\t\t\"sap/ui/Device\"\r\n\t], function (JSONModel, Device) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn {\r\n\t\t\tcreateDeviceModel : function () {\r\n\t\t\t\tvar oModel = new JSONModel(Device);\r\n\t\t\t\toModel.setDefaultBindingMode(\"OneWay\");\r\n\t\t\t\treturn oModel;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n);",
		"swa/rpos/DetailObjectNotFound.view.xml": "<mvc:View\n\t\tcontrollerName=\"swa.mykids.controller.BaseController\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{i18n>detailTitle}\"\n\t\t\ttext=\"{i18n>noObjectFoundText}\"\n\t\t\ticon=\"{sap-icon://product}\"\n\t\t\tdescription=\"\"\n\t\t\tshowNavButton=\"{device>/system/phone}\"\n\t\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>",
		"swa/rpos/view/DetailObjectNotFound.view.xml": "<mvc:View\n\t\tcontrollerName=\"swa.rpos.controller.BaseController\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{i18n>detailTitle}\"\n\t\t\ttext=\"{i18n>noObjectFoundText}\"\n\t\t\ticon=\"{sap-icon://product}\"\n\t\t\tdescription=\"\"\n\t\t\tshowNavButton=\"{device>/system/phone}\"\n\t\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>",
		"swa/rpos/view/DetailNoObjectsAvailable.view.xml": "<mvc:View\n\t\tcontrollerName=\"swa.rpos.controller.BaseController\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{i18n>notAvailableViewTitle}\"\n\t\t\ttext=\"{i18n>noObjectsAvailableText}\"\n\t\t\ticon=\"{sap-icon://product}\"\n\t\t\tdescription=\"\"\n\t\t\tshowNavButton=\"{device>/system/phone}\"\n\t\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>",
		"swa/rpos/view/App.view.xml": "<mvc:View\n\t\tcontrollerName=\"swa.rpos.controller.App\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\tdisplayBlock=\"true\"\n\t\tbusy=\"{appView>/busy}\"\n\t\tbusyIndicatorDelay=\"{appView>/delay}\"\n\t\txmlns=\"sap.m\">\n\t<SplitApp id=\"idAppControl\" />\n</mvc:View>",
		"swa/rpos/view/NotFound.view.xml": "<mvc:View\n\t\tcontrollerName=\"swa.rpos.controller.BaseController\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{i18n>notFoundTitle}\"\n\t\t\ttext=\"{i18n>notFoundText}\"\n\t\t\ticon=\"{sap-icon://document}\"\n\t\t\tdescription=\"\"\n\t\t\tshowNavButton=\"{device>/system/phone}\"\n\t\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>",
		"swa/rpos/localService/mockserver.js": "sap.ui.define([\r\n\t\t\"sap/ui/core/util/MockServer\"\r\n\t], function (MockServer) {\r\n\t\t\"use strict\";\r\n\r\n\t\tvar oMockServer,\r\n\t\t\t_sAppModulePath = \"swa/mykids/\",\r\n\t\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdata\";\r\n\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * Initializes the mock server.\r\n\t\t\t * You can configure the delay with the URL parameter \"serverDelay\".\r\n\t\t\t * The local mock data in this folder is returned instead of the real data for testing.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\r\n\t\t\tinit : function () {\r\n\t\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\r\n\t\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJsonFilesModulePath),\r\n\t\t\t\t\tsManifestUrl = jQuery.sap.getModulePath(_sAppModulePath + \"manifest\", \".json\"),\r\n\t\t\t\t\tsEntity = \"AdviseesListSet\",\r\n\t\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\r\n\t\t\t\t\tiErrorCode = sErrorParam === \"badRequest\" ? 400 : 500,\r\n\t\t\t\t\toManifest = jQuery.sap.syncGetJSON(sManifestUrl).data,\r\n\t\t\t\t\toMainDataSource = oManifest[\"sap.app\"].dataSources.mainService,\r\n\t\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_sAppModulePath + oMainDataSource.settings.localUri.replace(\".xml\", \"\"), \".xml\"),\r\n\t\t\t\t\t// ensure there is a trailing slash\r\n\t\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\r\n\r\n\t\t\t\toMockServer = new MockServer({\r\n\t\t\t\t\trootUri : sMockServerUrl\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// configure mock server with a delay of 1s\r\n\t\t\t\tMockServer.config({\r\n\t\t\t\t\tautoRespond : true,\r\n\t\t\t\t\tautoRespondAfter : (oUriParameters.get(\"serverDelay\") || 1000)\r\n\t\t\t\t});\r\n\r\n\t\t\t\toMockServer.simulate(sMetadataUrl, {\r\n\t\t\t\t\tsMockdataBaseUrl : sJsonFilesUrl,\r\n\t\t\t\t\tbGenerateMissingMockData : true\r\n\t\t\t\t});\r\n\r\n\t\t\t\tvar aRequests = oMockServer.getRequests(),\r\n\t\t\t\t\tfnResponse = function (iErrCode, sMessage, aRequest) {\r\n\t\t\t\t\t\taRequest.response = function(oXhr){\r\n\t\t\t\t\t\t\toXhr.respond(iErrCode, {\"Content-Type\": \"text/plain;charset=utf-8\"}, sMessage);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t// handling the metadata error test\r\n\t\t\t\tif (oUriParameters.get(\"metadataError\")) {\r\n\t\t\t\t\taRequests.forEach( function ( aEntry ) {\r\n\t\t\t\t\t\tif (aEntry.path.toString().indexOf(\"$metadata\") > -1) {\r\n\t\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Handling request errors\r\n\t\t\t\tif (sErrorParam) {\r\n\t\t\t\t\taRequests.forEach( function ( aEntry ) {\r\n\t\t\t\t\t\tif (aEntry.path.toString().indexOf(sEntity) > -1) {\r\n\t\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\toMockServer.start();\r\n\r\n\t\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * @public returns the mockserver of the app, should be used in integration tests\r\n\t\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\r\n\t\t\t */\r\n\t\t\tgetMockServer : function () {\r\n\t\t\t\treturn oMockServer;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n);",
		"swa/rpos/view/Master.view.xml": "<mvc:View controllerName=\"swa.rpos.controller.Master\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\"\r\n\txmlns:semantic=\"sap.m.semantic\">\r\n\t<semantic:MasterPage id=\"page\" title=\"{masterView>/title}\" navButtonPress=\"onNavBack\" showNavButton=\"true\">\r\n\t\t<semantic:subHeader>\r\n\t\t\t<Bar id=\"headerBar\">\r\n\t\t\t\t<contentMiddle>\r\n\t\t\t\t\t<SearchField id=\"searchField\" showRefreshButton=\"false\" tooltip=\"{i18n>masterSearchTooltip}\" width=\"100%\" \r\n\t\t\t\t\t\tsearch=\"onSearch\"></SearchField>\r\n\t\t\t\t</contentMiddle>\r\n\t\t\t</Bar>\r\n\t\t</semantic:subHeader>\r\n\t\t<semantic:content>\r\n\t\t\t<PullToRefresh id=\"pullToRefresh\" visible=\"false\" refresh=\"onRefresh\"/>\r\n\t\t\t<!-- For client side filtering add this to the items attribute:  parameters: {operationMode: 'Client'}}\" -->\r\n\t\t\t<List id=\"list\"\r\n\t\t\t\titems=\"{ path: '/getSWASet', sorter: { path: 'swaId', descending: false }, groupHeaderFactory: '.createGroupHeader' }\"\r\n\t\t\t\tbusyIndicatorDelay=\"{masterView>/delay}\" noDataText=\"{masterView>/noDataText}\"\r\n\t\t\t\tmode=\"{= ${device>/system/phone} ? 'None' : 'SingleSelectMaster'}\" growing=\"true\" growingScrollToLoad=\"true\"\r\n\t\t\t\tupdateFinished=\"onUpdateFinished\" selectionChange=\"onSelectionChange\">\r\n\t\t\t\t<infoToolbar>\r\n\t\t\t\t\t<Toolbar active=\"true\" id=\"filterBar\" visible=\"{masterView>/isFilterBarVisible}\" press=\"onOpenViewSettings\">\r\n\t\t\t\t\t\t<Title id=\"filterBarLabel\" text=\"{masterView>/filterBarLabel}\"/>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</infoToolbar>\r\n\t\t\t\t<items>\r\n\t\t\t\t\t<ObjectListItem id=\"idMstrLstItm\" press=\"onSelectionChange\" title=\"{lastName}, {firstName}\" type=\"{= ${device>/system/phone} ? 'Active' : 'Inactive'}\">\r\n\t\t\t\t\t\t<!--<secondStatus>\r\n\t\t\t\t\t\t\t<ObjectStatus text=\"{StudentStatus}\"/>\r\n\t\t\t\t\t\t</secondStatus>-->\r\n\t\t\t\t\t\t<attributes>\r\n\t\t\t\t\t\t\t<ObjectAttribute text=\"{swaId}\"/>\r\n\t\t\t\t\t\t\t<!--<ObjectAttribute text=\"\"/>-->\r\n\t\t\t\t\t\t</attributes>\r\n\t\t\t\t\t</ObjectListItem>\r\n\t\t\t\t</items>\r\n\t\t\t</List>\r\n\t\t</semantic:content>\r\n\t</semantic:MasterPage>\r\n</mvc:View>"
	}
});